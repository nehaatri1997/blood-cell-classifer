# -*- coding: utf-8 -*-
"""blood cell classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K7eIX8Z7NE-S6BpimoJevhD67N_aCTUE
"""

pip install tensorflow numpy matplotlib

import os

# Define the base directory
base_dir = 'type of cell dataset'

# Define subdirectories for train, validation, and test
subdirs = ['train', 'validation', 'test']

# Define classes
classes = ['red_blood_cell', 'white_blood_cell', 'platelet']

# Create the folder structure
for subdir in subdirs:
    for class_name in classes:
        # Define the path for each folder
        path = os.path.join(base_dir, subdir, class_name)
        # Create the directory if it doesn't already exist
        os.makedirs(path, exist_ok=True)

print("Folders created successfully!")

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Directory paths
base_dir = 'type of cell dataset'

# Data generators for training, validation, and testing
train_datagen = ImageDataGenerator(rescale=1.0/255, rotation_range=15, zoom_range=0.2, horizontal_flip=True)
validation_datagen = ImageDataGenerator(rescale=1.0/255)
test_datagen = ImageDataGenerator(rescale=1.0/255)

train_generator = train_datagen.flow_from_directory(
    directory=f'{base_dir}/train',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    directory=f'{base_dir}/validation',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    directory=f'{base_dir}/test',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

# prompt: show the images

import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
# pip install tensorflow numpy matplotlib is not needed if you are in a colab notebook


# Define the base directory
base_dir = 'type of cell dataset'

# Define subdirectories for train, validation, and test
subdirs = ['train', 'validation', 'test']

# Define classes
classes = ['red_blood_cell', 'white_blood_cell', 'platelet']

# Create the folder structure
for subdir in subdirs:
    for class_name in classes:
        # Define the path for each folder
        path = os.path.join(base_dir, subdir, class_name)
        # Create the directory if it doesn't already exist
        os.makedirs(path, exist_ok=True)

print("Folders created successfully!")


# Directory paths
base_dir = 'type of cell dataset'

# Data generators for training, validation, and testing
train_datagen = ImageDataGenerator(rescale=1.0/255, rotation_range=15, zoom_range=0.2, horizontal_flip=True)
validation_datagen = ImageDataGenerator(rescale=1.0/255)
test_datagen = ImageDataGenerator(rescale=1.0/255)

train_generator = train_datagen.flow_from_directory(
    directory=f'{base_dir}/train',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    directory=f'{base_dir}/validation',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    directory=f'{base_dir}/test',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

# Assuming you have uploaded images to the 'type of cell dataset' directory
# You need to have the images organized into the train, validation and test folders with the class folders inside
# e.g. type of cell dataset/train/red_blood_cell/*.jpg

# To show the images, you can use matplotlib
import matplotlib.pyplot as plt

# Get a batch of images and labels from the training generator
x_batch, y_batch = next(train_generator)

# Check if x_batch contains any data
if x_batch.size > 0:
    # Plot some images from the batch
    for i in range(min(6, x_batch.shape[0])):  # Limit loop to the number of images in the batch
        plt.imshow(x_batch[i])
        # Convert one-hot encoded label to class index
        class_index = y_batch[i].argmax()
        plt.title(f"Class: {classes[class_index]}")
        plt.show()
else:
    print("No images found in the training directory. Please make sure you have uploaded images to the correct folders.")

# Plot some images from the batch
for i in range(0, 6):
  plt.imshow(x_batch[i])
  plt.title(f"Class: {y_batch[i]}")  # Assuming y_batch contains the class labels
  plt.show()